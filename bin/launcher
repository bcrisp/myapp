#!/usr/bin/env ruby

require "bundler/setup"
require "sinatra"

ROOT = File.expand_path("../..", __FILE__)

def load_properties(properties)
  lines = File.readlines(properties).map { |s| s.strip }.reject { |s| s.empty? or s.start_with?("#") }
  Hash[lines.map { |line|
    k, v = line.split(/\s*=\s*/, 2)
    case v
    when /\A(\d+)\z/
      [k.to_sym, v.to_i]
    when /\A(false|true)\z/i
      [k.to_sym, /\Afalse\z/i !~ v]
    else
      [k.to_sym, v.to_s]
    end
  }]
end

options = {
  environment: ENV["APP_ENV"],
  logging: true,
  dump_errors: true,
}

properties = File.join(ROOT, "config", "config.properties")
if File.file?(properties)
  options = options.merge(load_properties(properties))
end

if port = options.delete(:"http.port")
  options[:port] = port
end

if data = options.delete(:"data.dir")
  options[:public_folder] = data
  dir = File.new(data)
  unless dir.flock(File::LOCK_EX | File::LOCK_NB)
    raise("another process is using data.dir=#{data.inspect}")
  end
end

if logs = options.delete(:"logs.dir")
  file = File.new(File.join(logs, "application.log"), "a+")
  file.sync = true
  unless file.flock(File::LOCK_EX | File::LOCK_NB)
    raise("another process is using logs.dir=#{logs.inspect}")
  end
  use Rack::CommonLogger, file
end

master = options.delete(:master)

known_options = [
  :bind,
  :dump_errors,
  :environment,
  :logging,
  :port,
  :public_folder,
  :root,
  :sessions,
  :static,
]

options.each do |k, v|
  if known_options.include?(k)
    set k, v
  else
    STDERR.puts("unknown configuration: #{k}=#{v.inspect}")
    exit(1)
  end
end

get "/status" do
  "ok"
end

get "/role" do
  if master
    "master"
  else
    "slave"
  end
end
